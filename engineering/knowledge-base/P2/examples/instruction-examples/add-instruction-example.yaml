# Example: Basic Math Instruction (ADD)
# This demonstrates a well-documented math instruction with all layers

id: add-instruction
mnemonic: ADD
category: math
syntax: "ADD D,{#}S {WC,WZ,WCZ}"
encoding: "EEEE 1000000 CZI DDDDDDDDD SSSSSSSSS"

timing:
  cycles: 2
  conditions: "Always 2 cycles in COG/LUT RAM"
  hub_sync: false
  pipeline_effects: "No stalls"

description: |
  Adds the source value S to destination D, storing the result back in D.
  This is a fundamental arithmetic operation that optionally updates the 
  carry (C) and zero (Z) flags based on the result. The source operand 
  can be a register or a 9-bit immediate value.

operation: "D := D + S; C := carry_out; Z := (result == 0)"

usage_notes: |
  ADD is commonly used for:
  - Incrementing counters and pointers
  - Accumulating sums
  - Address calculation
  - Multi-precision arithmetic (with ADDX for carry propagation)

special_cases:
  - condition: "Overflow from $FFFFFFFF to $00000000"
    behavior: "Sets carry flag if WC specified"
  - condition: "Result equals zero"
    behavior: "Sets zero flag if WZ specified"

affects_flags:
  c: "optional"  # Carry out from bit 31 if WC
  z: "optional"  # Set if result is zero if WZ

examples:
  - code: "ADD count, #1"
    explanation: "Increment counter by 1"
    context: "Loop counting"
    result: "count := count + 1"
    
  - code: "ADD ptr, #4"
    explanation: "Advance pointer by one long"
    context: "Array traversal"
    result: "ptr := ptr + 4"
    
  - code: "ADD sum, value WC"
    explanation: "Add with carry flag update"
    context: "Multi-precision addition"
    result: "sum := sum + value, C updated"
    
  - code: "ADD result, result WZ"
    explanation: "Double a value and test for zero"
    context: "Shift left alternative"
    result: "result := result * 2, Z updated"

related_instructions: ["SUB", "ADDS", "ADDX", "ADDSX", "SUMC", "SUMNC"]
opposite_of: "SUB"
see_also: ["Multi-precision arithmetic", "Flag operations"]

source_layers:
  csv: true
  datasheet: true
  silicon_doc: true
  forum_clarification: false

source_references:
  - document: "P2-Instruction-Set.csv"
    section: "Math Operations"
    page: 1
    notes: "Base definition and encoding"
  - document: "P2-Datasheet-v35"
    section: "6.2.1"
    page: 42
    notes: "Timing specifications"
  - document: "Silicon-Doc-v35-Part2"
    section: "Math Instructions"
    page: 127
    notes: "Detailed operation and examples"

completeness_score: 7
verification_status: automated
confidence_level: high

extraction_date: "2025-01-06"
last_updated: "2025-01-06T10:45:00Z"
last_verified: "2025-01-06"
schema_version: "1.0.0"

update_history:
  - date: "2025-01-06T10:45:00Z"
    changes: "Initial extraction from all sources"
    source: "Automated pipeline v1.0"