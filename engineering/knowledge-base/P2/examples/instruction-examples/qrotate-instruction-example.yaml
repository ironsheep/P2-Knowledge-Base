# Example: CORDIC Instruction (QROTATE)
# Demonstrates CORDIC operation with long execution time

id: qrotate-instruction
mnemonic: QROTATE
category: cordic
syntax: "QROTATE D,{#}S"
encoding: "EEEE 1101001 00I DDDDDDDDD SSSSSSSSS"

timing:
  cycles: 36
  conditions: "Fixed 36 cycles for rotation operation"
  hub_sync: false
  pipeline_effects: "Non-blocking - result retrieved with GETQX/GETQY"

description: |
  Initiates CORDIC rotation of vector (D[31:16], D[15:0]) by angle S[31:0].
  This hardware-accelerated operation rotates a 2D vector by a specified
  angle using the CORDIC algorithm. The operation runs asynchronously,
  allowing other instructions to execute while calculation proceeds.
  Results are retrieved using GETQX (X coordinate) and GETQY (Y coordinate).

operation: |
  CORDIC.X := D[31:16] * COS(S) - D[15:0] * SIN(S)
  CORDIC.Y := D[31:16] * SIN(S) + D[15:0] * COS(S)
  Continue execution (non-blocking)

usage_notes: |
  QROTATE is used for:
  - 2D graphics transformations
  - Signal processing (phase rotation)
  - Coordinate system conversions
  - Animation and motion calculations
  
  Important considerations:
  - Angle is in P2 binary radians ($00000000..$FFFFFFFF = 0..2π)
  - Input vector packed as X[31:16], Y[15:0]
  - Results are 32-bit signed values
  - GETQX/GETQY will stall if results not ready

special_cases:
  - condition: "Previous CORDIC operation still running"
    behavior: "Stalls until CORDIC available"
  - condition: "Zero vector input"
    behavior: "Returns zero vector"
  - condition: "Overflow in calculation"
    behavior: "Result saturates at signed limits"

affects_flags:
  c: false
  z: false

examples:
  - code: |
      MOV vector, ##$7FFF_7FFF    ' X=32767, Y=32767
      QROTATE vector, ##$40000000  ' Rotate 90 degrees
      ' ... other work can happen here ...
      GETQX result_x               ' Get rotated X
      GETQY result_y               ' Get rotated Y
    explanation: "Rotate vector 90 degrees counterclockwise"
    context: "2D graphics rotation"
    result: "result_x ≈ -32767, result_y ≈ 32767"
    
  - code: |
      QROTATE position, angle      ' Start rotation
      ADD angle, ##$01000000       ' Prepare next angle
      ' ... 30+ instructions can execute here ...
      GETQX new_x                  ' Retrieve result
      GETQY new_y
    explanation: "Pipeline CORDIC with other operations"
    context: "Efficient animation loop"
    result: "Overlapped computation"
    
  - code: |
      REP #4, #8                   ' Rotate 8 points
      QROTATE point, theta
      ADD point_ptr, #4
      RDLONG point, point_ptr
      GETQX rotated_x
      GETQY rotated_y
      WRLONG rotated_x, result_ptr
      ADD result_ptr, #4
      WRLONG rotated_y, result_ptr
      ADD result_ptr, #4
    explanation: "Batch rotate multiple points"
    context: "Polygon transformation"
    result: "8 points rotated efficiently"

related_instructions: ["QVECTOR", "GETQX", "GETQY", "QLOG", "QEXP"]
see_also: ["CORDIC Operations", "Fixed-Point Math", "Graphics Transformations"]

source_layers:
  csv: true
  datasheet: true
  silicon_doc: true
  forum_clarification: true

source_references:
  - document: "P2-Instruction-Set.csv"
    section: "CORDIC Instructions"
    page: 23
    notes: "Instruction encoding and syntax"
  - document: "P2-Datasheet-v35"
    section: "7.3"
    page: 156
    notes: "CORDIC timing and precision"
  - document: "Silicon-Doc-v35-Part3"
    section: "CORDIC Solver"
    page: 412
    notes: "Algorithm details and examples"
  - document: "Forum-2023-11-20"
    section: "Chip's notes on CORDIC precision"
    notes: "32-bit precision limits and overflow behavior"

completeness_score: 8
verification_status: chip-verified
confidence_level: authoritative

extraction_date: "2025-01-06"
last_updated: "2025-01-06T10:55:00Z"
last_verified: "2025-01-06"
schema_version: "1.0.0"

update_history:
  - date: "2025-01-06T10:55:00Z"
    changes: "Complete CORDIC instruction documentation"
    source: "All 4 layers integrated"