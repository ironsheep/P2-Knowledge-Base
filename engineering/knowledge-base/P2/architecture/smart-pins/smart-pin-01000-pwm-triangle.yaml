# Smart Pin Mode: %01000 - PWM Triangle
# Silicon Doc Reference: part4-smart-pins.txt, page 88
# Layer 1: Direct Silicon Doc extraction

mode_id: "%01000"

mode_name: "PWM Triangle"

mode_group: "signal_gen"

mode_complexity: "intermediate"

dac_mode_dependency: false

pin_pairing: "none"

wrpin_configuration:
  base_format: "%AAAA_BBBB_FFF_MMMMMMMMMMMMM_TT_SSSSS_0"
  
  a_input_selector:
    description: "4-bit A input selector - not used for PWM output mode"
    bit_pattern: "%AAAA"
    options:
      - code: "%0000"
        description: "this pin's read state (default, not used)"
        polarity: "true"
        source: "pin_read"
      - code: "%0001"
        description: "relative +1 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0010"
        description: "relative +2 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0011"
        description: "relative +3 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0100"
        description: "this pin's OUT bit from cogs"
        polarity: "true"
        source: "out_bit"
      - code: "%0101"
        description: "relative -3 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0110"
        description: "relative -2 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0111"
        description: "relative -1 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%1xxx"
        description: "inverted versions of above"
        polarity: "inverted"
        source: "any"
  
  b_input_selector:
    description: "4-bit B input selector - not used for PWM output mode"
    bit_pattern: "%BBBB"
    options:
      - code: "%0000"
        description: "this pin's read state (default, not used)"
        polarity: "true"
        source: "pin_read"
      - code: "%0001"
        description: "relative +1 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0010"
        description: "relative +2 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0011"
        description: "relative +3 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0100"
        description: "this pin's OUT bit from cogs"
        polarity: "true"
        source: "out_bit"
      - code: "%0101"
        description: "relative -3 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0110"
        description: "relative -2 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%0111"
        description: "relative -1 pin's read state"
        polarity: "true"
        source: "relative_pin"
      - code: "%1xxx"
        description: "inverted versions of above"
        polarity: "inverted"
        source: "any"
  
  input_logic_filtering:
    description: "3-bit input logic/filtering - not used for PWM output mode"
    bit_pattern: "%FFF"
    options:
      - code: "%000"
        description: "A, B (default)"
        operation: "passthrough"
        filter_type: "none"
      - code: "%001"
        description: "A AND B, B"
        operation: "logical_and"
        filter_type: "none"
      - code: "%010"
        description: "A OR B, B"
        operation: "logical_or"
        filter_type: "none"
      - code: "%011"
        description: "A XOR B, B"
        operation: "logical_xor"
        filter_type: "none"
      - code: "%100"
        description: "A, B, both filtered using global filt0"
        operation: "passthrough"
        filter_type: "filt0"
      - code: "%101"
        description: "A, B, both filtered using global filt1"
        operation: "passthrough"
        filter_type: "filt1"
      - code: "%110"
        description: "A, B, both filtered using global filt2"
        operation: "passthrough"
        filter_type: "filt2"
      - code: "%111"
        description: "A, B, both filtered using global filt3"
        operation: "passthrough"
        filter_type: "filt3"
  
  low_level_control:
    description: "13-bit low-level pin control (M[12:0]) - standard output configuration"
    bit_pattern: "%M............"
    special_modes:
      - condition: "M[12:10] = %101"
        behavior: "DAC_MODE - not typically used with PWM triangle"
  
  dir_out_control:
    description: "2-bit pin DIR/OUT control - OVERRIDDEN by smart pin"
    bit_pattern: "%TT"
    smart_off_behavior:
      non_dac_mode: []
      dac_mode: []
    smart_on_behavior:
      dac_modes: []
      non_dac_modes:
        - mode_range: "%01000 (PWM triangle)"
          behavior: "Smart pin overrides OUT signal to control PWM output"

x_parameter:
  usage: "Base period and PWM frame period configuration"
  bit_fields:
    - range: "X[15:0]"
      purpose: "Base period in clock cycles - fundamental PWM timing unit"
      valid_values:
        min: 1
        max: 65535
        special_values:
          - value: 100
            meaning: "100-clock base period for precise PWM timing"
          - value: 1000
            meaning: "1000-clock base period for smoother operation"
    - range: "X[31:16]"
      purpose: "PWM frame period in terms of base periods"
      valid_values:
        min: 1
        max: 65535
        special_values:
          - value: 100
            meaning: "100 base periods per PWM frame (1% resolution)"
          - value: 1000
            meaning: "1000 base periods per PWM frame (0.1% resolution)"
  configuration_timing: "reset_only"

y_parameter:
  usage: "PWM duty cycle value"
  bit_fields:
    - range: "Y[15:0]"
      purpose: "PWM output value captured at each frame start"
      valid_values:
        min: 0
        max: 65535
        special_values:
          - value: 0
            meaning: "Always output low (0% duty cycle)"
          - value: "frame_period"
            meaning: "Always output high (100% duty cycle)"
          - value: "frame_period/2"
            meaning: "50% duty cycle"
  update_behavior: "Value captured at frame start and used for entire frame duration"

z_result:
  data_type: "Not used - no result data returned"
  bit_interpretation: []
  flag_behavior: "C flag may contain status information"
  overflow_handling: "Not applicable"

operation_description: |
  PWM triangle mode overrides OUT to control the pin output state using triangle-wave PWM generation.
  X[15:0] establishes a base period in clock cycles which forms the fundamental timing unit.
  X[31:16] establishes a PWM frame period in terms of base periods. Y[15:0] establishes the PWM
  output value which gets captured at each frame start and used for the frame duration. The value
  should range from zero to the frame period (X[31:16]). A counter, updating at each base period,
  counts from the frame period down to one, then from one back up to the frame period. This creates
  a triangle counting pattern. At each base period, the captured output value is compared to the
  current counter. If the output value is equal or greater than the counter, a high is output;
  if less, a low is output. Y[15:0] is captured at each frame start, IN is raised, and the process
  repeats. The overall update time is TWO frame periods times the base period.

timing_specifications:
  clock_relationship: "Base period counter operates on system clock, frame timing based on triangle counting"
  base_period:
    description: "Set by X[15:0] - fundamental PWM timing resolution"
    min_clocks: 1
    max_clocks: 65535
    special_values:
      - value: 10
        meaning: "Fine timing resolution"
      - value: 100
        meaning: "Good balance of resolution and frequency"
  update_frequency: "PWM updates every base period, frame completes every 2 * frame_period * base_period clocks"
  settling_time: "Output changes within 1 clock of counter comparison"

in_signal_behavior:
  trigger_conditions:
    - "Frame start (Y[15:0] capture point)"
    - "Occurs every 2 * frame_period * base_period clocks"
  acknowledgment_method: "rdpin"
  polling_restrictions: "2-clock delay after acknowledgment before IN can be polled again"

initialization_requirement:
  critical: true
  description: "Smart pin MUST be reset before configuration"
  requirement: |
    The smart pin MUST be reset (DIR=0) before any configuration or reconfiguration.
    This ensures the smart pin is in a known state and prevents configuration conflicts.
  reset_sequence:
    pasm2: |
      DIRL  pin         ' REQUIRED: Reset smart pin (DIR=0)
      WRPIN mode, pin   ' Configure mode
      WXPIN x, pin      ' Set X parameter
      WYPIN y, pin      ' Set Y parameter
      DIRH  pin         ' Enable smart pin (DIR=1)
    spin2: |
      PINCLEAR(pin)              ' Reset pin (DIR=0, WRPIN=0)
      PINSTART(pin, mode, x, y)  ' Configure and enable
      ' OR manually:
      PINFLOAT(pin)              ' Ensure DIR=0
      WRPIN(pin, mode)           ' Set mode
      WXPIN(pin, x)              ' Set X parameter
      WYPIN(pin, y)              ' Set Y parameter
      PINHIGH(pin)               ' Enable (DIR=1)

reset_behavior:
  dir_low_effects:
    - "IN signal goes low"
    - "Output goes low"
    - "Y[15:0] is captured for use when operation resumes"
    - "Smart pin stops operation but retains configuration"
  dir_transition_effects: "PWM triangle generation begins with current Y value"
  wrpin_zero_effects: "Returns pin to normal mode, clears all smart pin configuration"
  reset_requirement: "ALWAYS set DIR=0 before reconfiguring the smart pin"

common_applications:
  - application: "Motor speed control"
    description: "Variable speed control for DC motors with smooth acceleration"
    complexity_level: "intermediate"
  - application: "LED brightness control"
    description: "Smooth LED dimming with triangle-wave PWM for reduced flicker"
    complexity_level: "beginner"
  - application: "Audio generation"
    description: "Generate triangle-wave audio signals or PWM audio"
    complexity_level: "intermediate"
  - application: "Power supply control"
    description: "Control switching power supplies with smooth regulation"
    complexity_level: "advanced"

configuration_examples:
  - name: "Basic motor control PWM"
    description: "100 Hz PWM with 1% resolution for motor control"
    reset_code: "DIRL motor_pin                  ' REQUIRED: Reset before configuration"
    wrpin_code: "WRPIN ##%0000_0000_000_0000000000000_01_01000_0, motor_pin"
    wxpin_code: "WXPIN ##$0064_0100, motor_pin"
    wypin_code: "WYPIN #50, motor_pin"
    enable_code: "DIRH motor_pin                  ' Enable after configuration"
    explanation: "Base period 256 clocks, frame 100 periods, duty=50/100=50% (160MHz/256/100/2=3.125Hz actual)"
  
  - name: "High-resolution LED dimming"
    description: "Fine control LED brightness with triangle PWM"
    reset_code: "DIRL led_pin                    ' REQUIRED: Reset before configuration"
    wrpin_code: "WRPIN ##%0000_0000_000_0000000000000_01_01000_0, led_pin"
    wxpin_code: "WXPIN ##$03E8_000A, led_pin"
    wypin_code: "WYPIN #0, led_pin                ' Start with LED off"
    enable_code: "DIRH led_pin                    ' Enable after configuration"
    explanation: "Base period 10, frame 1000 periods, 0.1% resolution"
  
  - name: "Variable frequency PWM"
    description: "Adjustable PWM frequency with fixed resolution"
    reset_code: "DIRL pwm_pin                    ' REQUIRED: Reset before configuration"
    wrpin_code: "WRPIN ##%0000_0000_000_0000000000000_01_01000_0, pwm_pin"
    wxpin_code: "WXPIN frame_config, pwm_pin"
    wypin_code: "WYPIN duty_value, pwm_pin"
    enable_code: "DIRH pwm_pin                    ' Enable after configuration"
    explanation: "Runtime configurable frame_config and duty_value for flexible operation"

typical_code_patterns:
  - pattern_name: "Motor control with acceleration"
    pasm2_code: |
      ' Configure triangle PWM for motor control
      WRPIN ##%0000000000000_01_01000_0, motor_pin
      WXPIN ##$0064_0064, motor_pin      ' Frame=100, Base=100
      DIRH  motor_pin                    ' Enable PWM
      
      ' Smooth acceleration loop
      MOV   current_duty, #0             ' Start stopped
      
      accel_loop:
      WYPIN current_duty, motor_pin      ' Update duty cycle
      TESTP motor_pin WC                 ' Wait for frame start
      IF_NC JMP #$-1                     ' Wait for IN high
      RDPIN dummy, motor_pin             ' Acknowledge
      
      ADD   current_duty, #1             ' Increment duty
      CMP   current_duty, max_duty WC
      IF_C  JMP #accel_loop              ' Continue until max speed
    explanation: "Smooth motor acceleration using triangle PWM with frame synchronization"
  
  - pattern_name: "LED brightness ramping"
    pasm2_code: |
      ' Setup high-resolution LED control
      WRPIN ##%0000000000000_01_01000_0, led_pin
      WXPIN ##$03E8_000A, led_pin        ' 1000 steps, base=10
      DIRH  led_pin                      ' Enable
      
      brightness_ramp:
      MOV   brightness, #0               ' Start dim
      
      ramp_up:
      WYPIN brightness, led_pin          ' Set brightness
      ADD   brightness, #10              ' Step up
      WAITCNT ramp_delay, cnt           ' Wait for visible change
      CMP   brightness, #1000 WC
      IF_C  JMP #ramp_up                 ' Continue ramping
      
      ' Ramp down (similar code)
      JMP   #ramp_down
    explanation: "Create smooth LED brightness ramping using high-resolution triangle PWM"

related_modes:
  - mode_id: "%01001"
    relationship: "complementary"
    description: "PWM sawtooth - linear PWM alternative to triangle PWM"
  - mode_id: "%01010"
    relationship: "advanced_version"
    description: "PWM SMPS - specialized PWM for switch-mode power supplies"
  - mode_id: "%00110"
    relationship: "alternative"
    description: "NCO frequency - for pure frequency generation without PWM"

related_instructions:
  - instruction: "WRPIN"
    usage_context: "Configure PWM triangle mode"
  - instruction: "WXPIN"
    usage_context: "Set base period (X[15:0]) and PWM frame period (X[31:16])"
  - instruction: "WYPIN"
    usage_context: "Set PWM duty cycle value (runtime adjustable)"
  - instruction: "DIRH"
    usage_context: "Enable PWM generation"
  - instruction: "TESTP"
    usage_context: "Check for frame start events"
  - instruction: "RDPIN"
    usage_context: "Acknowledge frame start (clears IN signal)"

hardware_considerations:
  power_implications: "Power consumption varies with duty cycle and PWM frequency"
  pin_loading_effects: "PWM can drive moderate loads, consider current requirements at high duty cycles"
  noise_considerations: "Triangle PWM has different harmonic content than sawtooth PWM"
  thermal_effects: "High duty cycles with heavy loads can cause significant heating"

extraction_metadata:
  extraction_date: "2025-09-06"
  source_documents:
    - document: "Silicon Doc part4-smart-pins.txt"
      pages: [88]
      section: "%01000 = PWM triangle"
  validation_status: "draft"
  completeness_score: 95
  technical_accuracy: "silicon_doc_verified"