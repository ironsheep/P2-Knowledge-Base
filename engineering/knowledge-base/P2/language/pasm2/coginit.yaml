instruction: COGINIT
syntax: COGINIT {#}Dest, {#}Src {WC}
encoding: "EEEE 1100111 CLI DDDDDDDDD SSSSSSSSS D if reg and WC              No cog available        \
  \   \u2014           2\u20139, +2 if result"
timing:
  cycles: 2
  type: fixed
group: Cog Control Instruction - Start an available cog, or restart a cog by ID.
description: "COGINIT starts a new (unused) cog, a new pair of cogs (that may share LUT memory), or a\
  \ specific cog by ID, to Result: Target cog is started, according to Dest, to execute code from Src.\
  \ The code pointer (Src) is written to the target Cog's PTRB, and optionally a data pointer or user\
  \ value is written to its PTRA (if previous SETQ is provided).\n\nCOGINIT starts a new (unused) cog,\
  \ a new pair of cogs (that may share LUT memory), or a speci\uFB01c cog by ID, to\n\nload code from\
  \ Hub RAM to be executed within Reg/LUT RAM or to be executed right from Hub RAM.\n\nIf the WC effect\
  \ is speci\uFB01ed, the C \uFB02ag is set (1) if the instruction failed to launch a cog, or is cleared\
  \ (0) if it was\n\nsuccessful. Also with the WC effect, if Dest is a register, it is overwritten with\
  \ $F (on failure) or with the ID of the\n\nnewly launched cog \u2014or the lowest of the pair of cogs\u2014\
  \ (on success).\n\nThe format of Dest is %E_N_xVVV.\n\nE: 0 = load from Hub RAM (Src) into target cog's\
  \ Reg RAM ($000\u2013$1F7) and begin execution at its Reg\n\nRAM ($000); 1 = no load, just execute from\
  \ target cog's existing Reg/LUT RAM, or from Hub RAM.\n\nN: 0 = target cog ID is V; 1 = start a free\
  \ cog or cog pair according to V.\n\nV: when N = 0, V is a speci\uFB01c cog ID (0\u20137; %000\u2013\
  %111); when N = 1, V is 0 (%000) to start a free cog or 1\n\n(%001) to start a free odd/even pair of\
  \ cogs for LUT RAM sharing. Use the WC effect to get the results in\n\nDest and C.\n\nThe lower 20 bits\
  \ of Src is the address of the start of code; the address in Hub RAM (or Reg/LUT RAM) where the\n\n\
  executable code image begins. The entire 32-bit Src value will be written into the target cog's PTRB\
  \ register.\n\nIf COGINIT is preceded by SETQ, the SETQ value will be written into the target cog's\
  \ PTRA register. This is\n\nintended as a convenient means of pointing the target cog's program to some\
  \ runtime data structure or passing it\n\na 32-bit parameter. If no SETQ is used, the target cog's PTRA\
  \ register will be cleared to zero.\n\nRelated instructions are COGID and COGSTOP.\n\nExecution Modes\n\
  \nCode can be loaded into Cog RAM (Reg RAM and optionally LUT RAM) and executed, or code can be executed\n\
  \nfrom Hub RAM without pre-loading into Cog RAM. For PASM2 programs, the former achieves the fastest\n\
  \nexecution speed and natural isolation from other cogs while the latter achieves a larger effective\
  \ code space\n\nbeyond the \u22481,000 instruction limit inside Cog RAM. It is common to run PASM2 code\
  \ from Reg RAM.\n\nTo execute code from Reg RAM, it must \uFB01rst be loaded from Hub RAM (i.e. a Dest\
  \ value where E = 0 achieves both\n\nload and execute in a single COGINIT instruction).\n\nTo execute\
  \ code from LUT RAM, it must \uFB01rst be manually copied or streamed into LUT RAM by code executing\
  \ in\n\nReg RAM (or by the neighboring cog in an even/odd pair that are sharing LUT RAM).\n\nTo execute\
  \ code from Hub RAM, the Dest's E bit must be 1 and the Src must be an address beyond $3FF. Note\n\n\
  that with a single COGINIT instruction, code could start out loaded into Reg RAM (E = 0), execute from\
  \ there, and\n\ncan branch to $400 or beyond (Hub execution), or it can even copy or stream code into\
  \ LUT RAM, execute in\n\nReg+LUT RAM, and then branch to $400 or beyond (Hub execution).\n\nAdditionally,\
  \ it's possible to load and execute code in another cog's Reg RAM (one COGINIT instruction) and\n\n\
  restart that cog thereafter (another COGINIT instruction) to execute starting at any place in its existing\
  \ Reg RAM\n\nor LUT RAM (from the previous load) by using a Dest value with E = 1 and a Src value of\
  \ less than $400. This\n\nworks whether or not the cog is terminated \uFB01rst, since its Cog RAM is\
  \ retained during its terminated (dormant)\n\nstate. For example, one possibility is a Reg/LUT RAM-resident\
  \ program consisting of a number of small\n\nindependent routines which are each exclusively started\
  \ at-will by another cog\u2014 apparent cog launch and parallel\n\nprocessing with no \"loading\" overhead\
  \ latency.\n\nCOGINIT Constants\n\nA number of constants are prede\uFB01ned for use in forming desired\
  \ Dest values for COGINIT instructions.\n\nCOGINIT Constants\n\nSymbol (for Dest)     Dest Value   \
  \   Notes\n\nThe target cog loads its own Reg RAM registers $000\u2013$1F7 from the Hub RAM\n\nCOGEXEC\
  \           %0_0_0000       starting at Src address, then begins execution at register address $000.\
  \ Target\n\ncog ID must be specified; i.e. COGEXEC+5 will launch Cog 5 in this fashion.\n\nSame as above\
  \ except an available (non-running) cog is chosen automatically;\n\ndo not specify an ID. Use WC effect\
  \ and a register for Dest (register's value set\n\nCOGEXEC_NEW         %0_1_0000\n\nto COGEXEC_NEW)\
  \ to get pass/fail (0/1) result in C flag and ID of employed\n\ncog in Dest register.\n\nSame as above\
  \ except an available (non-running) even/odd pair of cogs is\n\nCOGEXEC_NEW_PAIR       %0_1_0001   \
  \    chosen automatically\u2014 useful for LUT RAM sharing. Dest receives the lowest\n\nID of the pair\
  \ if successful (when the WC effect is used).\n\nNo loading; the target cog begins execution at Reg/LUT/Hub\
  \ RAM address Src.\n\nTarget cog ID must be specified; i.e. HUBEXEC+2 will launch Cog 2 in this\n\n\
  HUBEXEC           %1_0_0000\n\nfashion. NOTE: Though named HUBEXEC, this constant can also be used to\n\
  \nexecute pre-existing code in Reg RAM or LUT RAM as well as Hub RAM.\n\nSame as above except an available\
  \ (non-running) cog is chosen automatically;\n\ndo not specify an ID. Use WC effect and a register for\
  \ Dest (register's value set\n\nHUBEXEC_NEW         %1_1_0000\n\nto HUBEXEC_NEW) to get pass/fail (0/1)\
  \ result in C flag and ID of employed\n\ncog in Dest register.\n\nSame as above except an available\
  \ (non-running) even/odd pair of cogs is\n\nHUBEXEC_NEW_PAIR       %1_1_0001       chosen automatically\u2014\
  \ useful for LUT RAM sharing. Dest receives the lowest\n\nID of the pair if successful (when the WC\
  \ effect is used)."
parameters:
- Dest is the register or 9-bit literal describing the type of launch and possibly the ID of the desired
  cog to launch. If Dest is a register and WC is given, Dest is also where the ID of the launched cog
  will be written.
- "Src is a register, 9-bit literal, or 32-bit augmented literal whose value (lower 20 bits) is the target\
  \ RAM address (for code) and the new cog's PTRB value. Copyright \xA9 Parallax Inc. 2022/11/01 \u25AA\
  \ Propeller 2 Assembly Language Manual           \u25AA   Page 64"
- "WC is an optional effect to update the C \uFB02ag with the success (0) or fail (1) status and triggers\
  \ Dest to be overwritten with new cog's ID."
related:
- COGID
- COGSTOP
documentation_source: PASM2 Manual 2022/11/01 Pages 31-147
documentation_level: comprehensive
compiler_operand_format:
  name: operand_ls
  pattern: D/#,S/#
  description: 'Two operands: destination/immediate, source/immediate'
  valueType: 13
compiler_encoding:
  operandFormat: 13
enhancement_source: PNUT_TS_v2.0_complete_operand_integration_2025-09-13
last_updated: '2025-09-19'
brief_description: Cog initialize
category: Cog Control Instruction - Start an available cog, or restart a cog by ID.
result: Target cog is started, according to Dest, to execute code from Src. The code pointer (Src) is
  written to the
syntax_variants:
- COGINIT {#}Dest, {#}Src {WC}
- "A number of constants are prede\uFB01ned for use in forming desired Dest values for COGINIT instructions."
- COGINIT id, addr               WC                       '(id=HUBEXEC_NEW) skip load, start a free cog
  at addr
examples:
- code: "COGINIT #1,#$100                                  'load and start Cog 1 from Hub RAM $100\n\u2014\
    or\u2014"
- code: 'COGINIT #COGEXEC+1,#$100'
- code: "COGINIT #%1_0_0101, PTRA                          'skip load and start Cog 5 at PTRA\n\u2014\
    or\u2014"
- code: "COGINIT #HUBEXEC+5, PTRA\n  SETQ       ptra_val                               'ptra_val will\
    \ go into target cog's PTRA register"
- code: "COGINIT #%0_1_0000, addr                          'load and start a free cog at addr\n\u2014\
    or\u2014\n  SETQ    ptra_val"
- code: 'COGINIT #COGEXEC_NEW, addr'
- code: "COGINIT #%1_1_0001, addr                          'skip load, start a free pair of cogs at addr\
    \ (for LUT RAM sharing)\n\u2014or\u2014"
- code: 'COGINIT #HUBEXEC_NEW_PAIR, addr'
- code: "COGINIT id, addr               WC                       '(id=HUBEXEC_NEW) skip load, start a\
    \ free cog at addr\n                                                          'C=0 and id=cog if okay\n\
    \  COGID         myID                                      'reload and restart me at Hub RAM PTRB"
- code: COGINIT myID, PTRB
manual_extraction_date: '2025-01-19'
