instruction: ALTS
syntax: ALTS Dest, {#}Src
encoding: EEEE 1001100 10I DDDDDDDDD SSSSSSSSS                     D 1
timing:
  cycles: 1
  type: fixed
group: Indirection Instruction - Alter S field of next instruction.
description: "ALTS modifies the next instruction's Src value to be (Src + Dest) & $1FF (for syntax 1),\
  \ or to Dest[8:0] (for syntax Result: The next instruction's pipelined Src value is altered to be (Src\
  \ + Dest) & $1FF, or just Dest[8:0] in syntax 2.\n\nALTS modi\uFB01es the next instruction's Src value\
  \ to be (Src + Dest) & $1FF (for syntax 1), or to Dest[8:0] (for syntax\n\n2).\n\nIn syntax 1, Src consists\
  \ of two 9-bit \uFB01elds; a base value (Src[8:0]) and a signed auto-indexer (Src[17:9]).\n\n\u25CF\
  \   The base represents a starting point. ALTS adds the offset (Dest[8:0]) to the base (Src[8:0]) to\
  \ determine\n\nthe next instruction's Src value.\n\n\u25CF   At the end of ALTS execution, the optional\
  \ auto-indexer value (usually 0, 1, or -1) is added to the offset\n\n(Dest) for a future ALTS+instruction\
  \ iteration.\n\nIn syntax 2, Dest serves as the full value\u2014 it is used as-is for the next instruction's\
  \ substitute Src value."
parameters:
- Dest is the register whose 9-bit value is the offset, or the full value, for the next instruction to
  operate on.
- Src is an optional register, 9-bit literal, or 18-bit augmented literal whose value contains a base
  (Src[8:0]; added to offset (Dest) for the next instruction) and also an optional auto-indexer value
  (Src[17:9]; added to Dest at the end of execution).
- The base represents a starting point. ALTS adds the offset (Dest[8:0]) to the base (Src[8:0]) to determine
  the next instruction's Src value.
- At the end of ALTS execution, the optional auto-indexer value (usually 0, 1, or -1) is added to the
  offset (Dest) for a future ALTS+instruction iteration.
- The instruction following ALTS is shielded from interrupt
- ALTS alters the next instruction regardless of its kind
- "Field value modi\uFB01cation occurs in the instruction pipeline only; code is not altered, values do\
  \ not persist"
- "SETQ / SETQ2 does not affect ALTx instructions\u2014 the Q value passes through to the next instruction"
documentation_source: PASM2 Manual 2022/11/01 Pages 31-147
documentation_level: comprehensive
examples:
- name: Array Indexing Pattern
  description: Index into array of longs in COG RAM
  code: ''' Access element portctr of rxpin array

    alts    portctr, #rxpin     '' modify next instruction''s source

    mov     rxd, 0-0            '' 0-0 gets replaced with rxpin[portctr]


    '' Where:

    '' portctr = index (0-7)

    '' rxpin = base of array

    '' rxd = destination for array element

    '
  source: P2-OctoSerial
- name: Multi-Resource Management
  description: Systematic access to multiple resource arrays
  code: "' Service multiple ports in round-robin\nloop\n        ' Get RX pin for current port\n      \
    \  alts    portctr, #rxpin\n        mov     rxd, 0-0\n        \n        ' Get TX pin for current port\n\
    \        alts    portctr, #txpin\n        mov     txd, 0-0\n        \n        ' Service this port\n\
    \        testb   rxd, #31        wc  ' test for -1 (unused)\nif_nc   call    #rx_service\n       \
    \ \n        testb   txd, #31        wc\nif_nc   call    #tx_service\n        \n        ' Next port\n\
    \        incmod  portctr, #7     wc\nif_nc   jmp     #loop\n"
  source: P2-OctoSerial
- name: Configuration Array Access
  description: Access configuration parameters by index
  code: ''' Get buffer pointer for port

    alts    portctr, #p_rxbuf

    mov     buffer_ptr, 0-0


    '' Get head index pointer for port

    alts    portctr, #p_rxhead

    mov     head_ptr, 0-0


    '' Read head index from hub

    rdlong  head_idx, head_ptr

    '
  source: P2-OctoSerial
related_instructions:
- ALTD: Modify destination field
- ALTB: Modify bit field
- ALTI: Modify instruction
notes:
- The 0-0 pattern is a placeholder that gets modified
- Efficient for array access without loops
- Enables self-modifying code patterns
- Critical for multi-resource management in single COG
compiler_operand_format:
  name: operand_duiz
  pattern: D{,S/#}
  description: Destination, optional source (immediate bit set if no source)
  valueType: 5
compiler_encoding:
  operandFormat: 5
enhancement_source: PNUT_TS_v2.0_complete_operand_integration_2025-09-13
last_updated: '2025-09-19'
brief_description: Alter source
category: "Indirection Instruction - Alter S \uFB01eld of next instruction."
result: The next instruction's pipelined Src value is altered to be (Src + Dest) & $1FF, or just Dest[8:0]
  in syntax 2.
syntax_variants:
- ALTS Dest, {#}Src
- ALTS Dest
- "ALTS modi\uFB01es the next instruction's Src value to be (Src + Dest) & $1FF (for syntax 1), or to\
  \ Dest[8:0] (for syntax"
- "\u25CF   The base represents a starting point. ALTS adds the offset (Dest[8:0]) to the base (Src[8:0])\
  \ to determine"
- (Dest) for a future ALTS+instruction iteration.
usage_notes: "The instruction following ALTS is shielded from interrupt\nALTS alters the next instruction\
  \ regardless of its kind\nField value modi\uFB01cation occurs in the instruction pipeline only; code\
  \ is not altered, values do not persist\nSETQ / SETQ2 does not affect ALTx instructions\u2014 the Q\
  \ value passes through to the next instruction"
manual_extraction_date: '2025-01-19'
