manifest_type: "pattern_index"
description: "P2 Spin2 code patterns for AI code generation"
pattern_categories:
  structural:
    description: "Object structure and composition patterns"
    patterns:
      - no_objects.yaml
      - single_object.yaml
      - few_objects.yaml
      - several_objects.yaml
      - framework_pattern.yaml
      
  implementation:
    description: "Spin2 implementation patterns"
    patterns:
      - spin2_buffer_management.yaml
      - spin2_timing_control.yaml
      - spin2_protocol_implementation.yaml
      - spin2_pin_control.yaml
      - spin2_state_machine.yaml
      - spin2_error_handling.yaml
      - spin2_memory_allocation.yaml
      - spin2_cog_management.yaml
      - spin2_diagnostic_output.yaml
      - spin2_event_dispatcher.yaml
      - spin2_layered_architecture.yaml
      - spin2_mailbox_communication.yaml
      - spin2_plugin_system.yaml
      - spin2_resource_pool.yaml
      - spin2_shared_memory.yaml
      
  applications:
    description: "Application-level patterns"
    patterns:
      - display_driver.yaml
      - sensor_reader.yaml
      - motor_controller.yaml
      - communication_handler.yaml
      - data_logger.yaml
      - audio_processor.yaml
      - test_harness.yaml
      - configuration_manager.yaml
      - utility_library.yaml
      
selection_guide: |
  Start with structural patterns to determine object organization,
  then select implementation patterns for specific functionality,
  and finally choose application patterns for domain-specific needs