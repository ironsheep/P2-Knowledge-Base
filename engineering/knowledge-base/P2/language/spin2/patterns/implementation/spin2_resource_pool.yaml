pattern_id: "resource_pool"
when_use:
  - "Limited resource management"
  - "Object pooling"
implementation: |
  VAR
    long pool[8]
    byte pool_free
    
  PUB acquire() : resource | i
    repeat i from 0 to 7
      if pool_free & (1<<i)
        pool_free &= !(1<<i)
        return @pool[i]
    return 0
    
  PUB release(resource)
    pool_free |= 1<<((resource-@pool)/4)
resources:
  memory: "pool size * item size"
  overhead: "allocation tracking"
combines_with:
  - "memory_allocation"
  - "shared_memory"