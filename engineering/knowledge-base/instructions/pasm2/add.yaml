mnemonic: "ADD"
syntax:
  - "ADD D,{#}S {WC/WZ/WCZ}"
  - "ADD D,{#}S"
  - "ADD D,{#}S WC"
  - "ADD D,{#}S WZ"
  - "ADD D,{#}S WCZ"
group: "math_and_logic"
description: "Add S into D. D = D + S. C = carry of (D + S)."

operation:
  basic_operation: "D = D + S"
  flag_effects:
    carry_flag: "C = carry of (D + S)"
    zero_flag: "Z = (result == 0)"
  conditions: []

timing:
  base_clocks: 2
  cog_lut_timing: 2
  hub_timing: 2
  timing_notes:
    - "All Math and Logic instructions execute in 2 clock cycles"

flags:
  affects_c: true
  affects_z: true
  flag_options: ["WC", "WZ", "WCZ"]
  flag_meanings:
    WC: "Write carry flag with addition carry result"
    WZ: "Write zero flag if result equals zero" 
    WCZ: "Write both carry and zero flags"

operands:
  destination:
    type: "register"
    range: "0..511 for cog/LUT registers"
    description: "Destination register that receives D + S"
  source:
    type: "register_or_immediate"
    register_range: "0..511 for cog/LUT registers"
    immediate_range: "9-bit signed (-256..255) or 32-bit with AUGS"
    description: "Source value to add to destination"

variants:
  - syntax: "ADD D,{#}S {WC/WZ/WCZ}"
    description: "Add source to destination with optional flag updates"
    specific_operation: "D = D + S, flags per options"

examples:
  - title: "Basic Register Addition"
    description: "Add two registers without flags"
    code: "ADD R1, R2"
    explanation: "Adds R2 to R1, stores sum in R1"
  - title: "Addition with Carry Flag"
    description: "Add with carry flag to detect overflow"
    code: "ADD R1, R2 WC"
    explanation: "Adds R2 to R1, sets C=1 if carry occurred"
  - title: "Immediate Value Addition"
    description: "Add immediate value to register"
    code: "ADD R1, #100"
    explanation: "Adds immediate value 100 to R1"

related_instructions:
  - "SUB"
  - "ADDS" 
  - "ADDX"
  - "ADDSX"

special_behaviors:
  - "Asterisk (*) in documentation indicates Z flag affected when result equals zero"
  - "Can be used in extended precision arithmetic with ADDX"

notes:
  - "Most fundamental arithmetic operation in PASM2"
  - "Critical for address calculations and loop counters"
  - "Forms basis for more complex arithmetic operations"

source_references:
  datasheet_section: "6.2 Math and Logic Instructions"
  page_references: ["Datasheet instruction table"]
  extraction_notes: "Extracted from pasm2-complete-instruction-tables.md Math and Logic section"