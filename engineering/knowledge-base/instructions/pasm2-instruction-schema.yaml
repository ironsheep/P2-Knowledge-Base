name: "PASM2 Instruction YAML Schema"
version: "1.0"
description: "Complete schema specification for PASM2 instruction YAML files in the P2 knowledge base"

schema_specification:
  required_fields:
    - mnemonic
    - syntax
    - group
    - description
    - operation
    - timing
    - flags
    
  optional_fields:
    - variants
    - operands
    - examples
    - related_instructions
    - special_behaviors
    - notes
    - source_references

field_definitions:
  mnemonic:
    type: "string"
    description: "Primary instruction mnemonic (e.g., 'ADD', 'MOV', 'RDLONG')"
    example: "ADD"
    
  syntax:
    type: "array of strings" 
    description: "All valid syntax forms for this instruction"
    example: 
      - "ADD D,{#}S {WC/WZ/WCZ}"
      - "ADD D,{#}S WC"
      - "ADD D,{#}S WZ"
    notes: "Include all variants with different flag combinations"
    
  group:
    type: "string"
    description: "Functional group classification"
    valid_values:
      - "math_and_logic"
      - "pin_and_smart_pin"  
      - "branch"
      - "hub_control_fifo_ram"
      - "event"
      - "interrupt"
      - "register_indirection"
      - "cordic_solver"
      - "color_space_pixel_mixer"
      - "lookup_table_streamer_misc"
    example: "math_and_logic"
    
  description:
    type: "string"
    description: "Human-readable description of what the instruction does"
    example: "Add S into D. D = D + S. C = carry of (D + S)."
    
  operation:
    type: "object"
    description: "Detailed operational specification"
    fields:
      basic_operation:
        type: "string"
        description: "Core mathematical or logical operation"
        example: "D = D + S"
      flag_effects:
        type: "object"
        description: "How flags are affected"
        fields:
          carry_flag:
            type: "string"
            description: "Effect on carry flag (C)"
            example: "C = carry of (D + S)"
          zero_flag: 
            type: "string"
            description: "Effect on zero flag (Z)"
            example: "Z = (result == 0)"
          custom_flags:
            type: "string"
            description: "Any special flag behaviors"
      conditions:
        type: "array of strings"
        description: "Special conditions that affect operation"
        example: ["Prior SETQ overrides S[9:5]"]
        
  timing:
    type: "object"
    description: "Clock cycle timing information"
    fields:
      base_clocks:
        type: "integer or string"
        description: "Base clock cycles required"
        example: 2
        notes: "Use string for variable timing like '2...9'"
      cog_lut_timing:
        type: "integer or string"
        description: "Timing when executing from COG or LUT memory"
        example: 2
      hub_timing:
        type: "integer or string"
        description: "Timing when executing from HUB memory"
        example: "13...20"
      conditional_timing:
        type: "object"
        description: "Different timing based on conditions"
        example:
          branch_taken: 4
          branch_not_taken: 2
      timing_notes:
        type: "array of strings"
        description: "Additional timing considerations"
        example: ["Additional +1 clock if instruction crosses hub long boundary"]
        
  flags:
    type: "object"
    description: "Flag usage and effects"
    fields:
      affects_c:
        type: "boolean"
        description: "Whether instruction affects carry flag"
      affects_z:
        type: "boolean" 
        description: "Whether instruction affects zero flag"
      flag_options:
        type: "array of strings"
        description: "Available flag modifier options"
        example: ["WC", "WZ", "WCZ"]
      flag_meanings:
        type: "object"
        description: "Specific meaning of flags for this instruction"
        example:
          WC: "Write carry flag with result"
          WZ: "Write zero flag with result"
          WCZ: "Write both carry and zero flags"
          
  operands:
    type: "object"
    description: "Detailed operand specifications"
    fields:
      destination:
        type: "object"
        description: "Destination operand (D) details"
        fields:
          type: "string"
          description: "Type of destination"
          valid_values: ["register", "special_register", "pin_range"]
          range: "string"
          description: "Valid range if applicable"
          example: "0..511 for register addresses"
      source:
        type: "object"
        description: "Source operand (S) details"
        fields:
          type: "string"
          valid_values: ["register", "immediate", "pin_range", "special"]
          immediate_range: "string"
          description: "Range for immediate values"
          example: "9-bit signed (-256..255) or 32-bit with AUGS"
      special_operands:
        type: "array"
        description: "Any special operand types"
        example:
          - name: "PA/PB/PTRA/PTRB"
            description: "Special pointer registers"
            
  variants:
    type: "array"
    description: "Different forms or variants of the instruction"
    item_fields:
      syntax: "string"
      description: "string"
      specific_operation: "string"
      timing_override: "object"
    example:
      - syntax: "ABS D"
        description: "Get absolute value of D into D"
        specific_operation: "D = ABS(D)"
      - syntax: "ABS D,{#}S"
        description: "Get absolute value of S into D"
        specific_operation: "D = ABS(S)"
        
  examples:
    type: "array"
    description: "Code examples showing instruction usage"
    item_fields:
      title: "string"
      description: "string"
      code: "string"
      explanation: "string"
    example:
      - title: "Basic Addition"
        description: "Add two registers"
        code: "ADD R0, R1 WC"
        explanation: "Adds R1 to R0, stores result in R0, sets carry flag"
        
  related_instructions:
    type: "array of strings"
    description: "Related or similar instructions"
    example: ["SUB", "ADDS", "ADDX", "ADDSX"]
    
  special_behaviors:
    type: "array of strings"
    description: "Special behaviors, limitations, or quirks"
    example:
      - "Instruction execution time may vary based on hub window alignment"
      - "SETQ instruction affects operand interpretation"
      
  notes:
    type: "array of strings" 
    description: "Additional notes, warnings, or implementation details"
    example:
      - "Asterisk (*) in original documentation indicates Z flag affected by zero result"
      - "This instruction respects interrupt boundaries"
      
  source_references:
    type: "object"
    description: "References to source documentation"
    fields:
      datasheet_section:
        type: "string"
        example: "6.2 Math and Logic Instructions"
      page_references:
        type: "array of strings"
        example: ["Datasheet p.142", "Silicon Doc Part 2 p.67"]
      extraction_notes:
        type: "string"
        description: "Notes about extraction process"

instruction_groups:
  math_and_logic:
    description: "Arithmetic, logical, and bit manipulation instructions"
    typical_timing: "2 clocks"
    examples: ["ABS", "ADD", "AND", "MOV", "CMP"]
    
  pin_and_smart_pin:
    description: "Pin control and smart pin configuration instructions"
    typical_timing: "2 clocks"
    examples: ["DRVH", "OUTL", "TESTP", "WRPIN"]
    
  branch:
    description: "Flow control, calls, jumps, and conditional branches"
    typical_timing: "2-4 clocks (conditional), 4/13...20 (unconditional)"
    examples: ["CALL", "JMP", "DJNZ", "RET"]
    
  hub_control_fifo_ram:
    description: "Hub memory access, FIFO operations, and system control"
    typical_timing: "Variable, often 3...10 or 9...16 clocks"
    examples: ["RDLONG", "WRLONG", "COGID", "RFLONG"]
    
  event:
    description: "Event handling, polling, and waiting"
    typical_timing: "2 clocks (poll), 2+ clocks (wait)"
    examples: ["WAITCT1", "POLLATN", "SETPAT"]
    
  interrupt:
    description: "Interrupt configuration and handling"
    typical_timing: "2 clocks"
    examples: ["SETINT1", "ALLOWI", "STALLI"]
    
  register_indirection:
    description: "Runtime modification of instruction operands"
    typical_timing: "2 clocks" 
    examples: ["ALTD", "ALTS", "ALTI"]
    
  cordic_solver:
    description: "CORDIC mathematical operations"
    typical_timing: "2...9 clocks (start), 2...58 clocks (result)"
    examples: ["QMUL", "QDIV", "GETQX"]
    
  color_space_pixel_mixer:
    description: "Color space conversion and pixel manipulation"
    typical_timing: "2 clocks (setup), 7 clocks (pixel ops)"
    examples: ["SETCMOD", "MIXPIX", "ADDPIX"]
    
  lookup_table_streamer_misc:
    description: "LUT access, streamer control, and miscellaneous operations"
    typical_timing: "2-3 clocks (most), variable (streamer)"
    examples: ["RDLUT", "WRLUT", "XINIT", "NOP", "WAITX"]

naming_conventions:
  file_naming: "lowercase-instruction-name.yaml"
  examples:
    - "add.yaml"
    - "rdlong.yaml" 
    - "drvh.yaml"
    - "waitct1.yaml"
  special_cases:
    - "Instructions with numbers: keep numbers (e.g., 'setint1.yaml')"
    - "Multi-word instructions: hyphenate (e.g., 'test-p.yaml')"
    - "Special characters: convert to text (e.g., 'loc-pa-pb-ptra-ptrb.yaml')"

validation_rules:
  required_field_validation:
    - "All required fields must be present"
    - "Mnemonic must match filename (case-insensitive)"
    - "Group must be one of the valid group values"
    - "Timing information must be present and valid"
    
  consistency_checks:
    - "Syntax array should include all documented variants"
    - "Flag options should match syntax specifications"
    - "Related instructions should exist as separate files"
    
  format_validation:
    - "YAML must be valid and parseable"
    - "String fields should not be empty"
    - "Numeric fields should be appropriate type"
    - "Arrays should not be empty when present"

extraction_methodology:
  layer_1_csv_data:
    description: "Basic instruction data from P2 Instruction Set CSV equivalent"
    source: "pasm2-complete-instruction-tables.md"
    extracts: ["mnemonic", "syntax", "description", "basic timing", "group"]
    
  layer_2_datasheet_timing:
    description: "Detailed timing data from P2 Datasheet"
    source: "P2-Datasheet sections 6.2-6.5"
    extracts: ["detailed timing", "memory-specific timing", "conditional timing"]
    
  layer_3_silicon_doc_narratives:
    description: "Rich descriptions from Silicon Documentation"
    source: "Silicon Doc PDF parts 1-5"
    extracts: ["detailed explanations", "usage contexts", "examples"]
    
  layer_4_forum_clarifications:
    description: "Additional insights from Chip Gracey forum posts"
    source: "Collected forum posts and clarifications"
    extracts: ["implementation details", "gotchas", "optimization tips"]

quality_metrics:
  completeness_score:
    description: "8-point scale based on layer coverage"
    scoring:
      0: "No data"
      1: "Mnemonic only"
      2: "Basic syntax and description (Layer 1 partial)"
      3: "Complete Layer 1 (CSV equivalent data)"
      4: "Layer 1 + basic timing (Layer 2 partial)"
      5: "Complete Layers 1+2 (Datasheet coverage)"
      6: "Layers 1+2 + narratives (Layer 3 partial)"
      7: "Complete Layers 1+2+3 (Silicon Doc coverage)"
      8: "Complete all layers including forum clarifications"
      
  audit_tracking:
    extraction_timestamp: "ISO 8601 timestamp of extraction"
    source_versions: "Versions/dates of source documents used"
    extraction_method: "Automated/manual/hybrid indication"
    review_status: "Unreviewed/reviewed/validated"
    known_gaps: "List of missing information"