object_metadata:
  architecture:
    cog_count: 1
    memory_requirements:
      cog_ram: ''
      hub_ram: ''
    multi_cog: false
    performance_notes: ''
  author: 'Gavin Garner | added by ArchiverContent : CodeMicrocontroller : Propeller
    1Languages : PASM, SPINCategory : Motor ControlLicence : OtherTag : ServoContent'
  author_username: ''
  community:
    forum_posts: []
    modification_notes: []
    related_objects: []
    user_reviews: []
  compatibility:
    dependencies: []
    known_issues: []
    p2_chip_versions:
    - all
    tested_platforms: []
  functionality:
    category: display
    description_full: "These are five programs that demonstrate various techniques\
      \ for controlling RC servomotors with the Propeller chip. These are meant to\
      \ be used as samples/demos, and I\u201A\xC4\xF4ve included thorough comments\
      \ that explain exactly how to use them in your own code. They are designed to\
      \ be very easy to understand and adapt to fit into your own code and applications.\
      \ They all dedicate a separate cog to the creation of a continuous stream of\
      \ servo pulses. Once the code is running on a separate cog, a servo\u201A\xC4\
      \xF4s position can be changed by simply changing the value of its \u201A\xC4\
      \xFAposition\u201A\xC4\xF9 variable in the main Hub RAM (using Spin or assembly\
      \ code such as \u201A\xC4\xFAposition:=110_000\u201A\xC4\xF9). In your own applications,\
      \ you could replace the 1 second waitcnt pauses that I have in my \u201A\xC4\
      \xFADemo\u201A\xC4\xF9 method with any other operations you need to perform.\
      \ Single_Servo_Spin shows you how to control a motor using a few simple lines\
      \ of Spin. Although this is easy to understand, it is has very poor position\
      \ resolution (around 175 possible positions). Single_Servo_Assembly demonstrates\
      \ how to control one RC servomotor by running a simple assembly program on a\
      \ separate cog. The output pulse resolution for this technique is between 12.5-50ns\
      \ when using an 80MHz system clock, which in theory corresponds to up to around\
      \ 140,000 possible positions for a Parallax/Futaba Standard Servo. Two_Servo_Assembly\
      \ and Three_Servo_Assembly demonstrate how to control multiple servos by running\
      \ an assembly program on a separate cog. Once you understand how these two programs\
      \ work, you could easily modify/expand them to control up to around ten RC servomotors.\
      \ (Just reduce the \u201A\xC4\xFALowTime\u201A\xC4\xF9 value so that, in total,\
      \ there is about 20ms between the pulses for each motor.) Because the servo\
      \ pulses are sent out one after another (back to back), the current drawn by\
      \ each servo will also be staggered. (If you need to control more than ten servos\
      \ and don\u201A\xC4\xF4t need as high of a position resolution, try using the\
      \ Servo32v3 object in the Propeller Library.) Finally, I\u201A\xC4\xF4ve included\
      \ a program called Single_Servo_Counter that demonstrates how to use a cog\u201A\
      \xC4\xF4s counter to create a servo pulse. If you actually find that you are\
      \ maxing out all of your Propeller chip\u201A\xC4\xF4s processing capabilities\
      \ in a particular application, you could apply this technique and try to squeeze\
      \ a few more lines of code in while the cog is not busy setting up its counter.\
      \ In general, I think that the servo control technique based on assembly code\
      \ is probably the most logical and robust choice. I hope that these help people\
      \ out!"
    description_short: 'These are five programs that demonstrate various techniques
      for controlling RC servomotors with the '
    hardware_support: []
    peripherals: []
    subcategory: ''
    tags:
    - display
    - motor
    - demo
  metadata:
    discovery_date: '2025-09-12T11:41:53.302559'
    extraction_status: discovered
    kb_integration: none
    last_verified: '2025-09-12T11:43:52.154631'
    quality_score: 5
  notes:
    analysis_notes: ''
    extraction_notes: Auto-discovered from pasm category
    integration_todo: []
  object_id: '2772'
  technical_details:
    file_format: ZIP
    file_size: ''
    languages:
    - PASM
    microcontroller:
    - P2
    version: ''
  title: RC_Servo_Control
  urls:
    documentation: ''
    download_direct: https://obex.parallax.com/wp-admin/admin-ajax.php?action=download_obex_zip&popcorn=salty&obuid=OB2772
    forum_discussion: https://forums.parallax.com
    github_repo: https://github.com/parallaxinc
    obex_page: https://obex.parallax.com/obex/rc_servo_control/
