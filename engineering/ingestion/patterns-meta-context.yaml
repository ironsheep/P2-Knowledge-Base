# P2 Patterns Meta-Context for Download On Demand
# CRITICAL: Explains that patterns are discovered, not prescribed

pattern_collection_metadata:
  version: "2.0.0"
  analysis_date: "2025-09-15"
  sample_size: 730  # Files analyzed
  pattern_count: 28  # Patterns discovered so far
  
  # CRITICAL: Patterns are OPEN-ENDED
  pattern_space_nature: "OPEN_AND_EVOLVING"
  
  important_context:
    discovered_not_prescribed: |
      These 28 patterns were DISCOVERED through analysis of existing code,
      not DESIGNED as the only valid approaches. They represent common
      solutions that have emerged in the P2 community, not rules to follow.
    
    incomplete_coverage: |
      730 files represent only a snapshot of P2 development as of 2025.
      New hardware features, use cases, and developer innovations will
      create new patterns. This catalog will always be incomplete.
    
    pattern_evolution: |
      Patterns evolve. What's rare today (Smart Pin usage at 15%) may
      become common tomorrow. What's common (NO_OBJECTS at 51%) may
      decrease as applications become more complex.
    
    combinatorial_explosion: |
      These 28 patterns can be combined in countless ways. The actual
      pattern space is combinatorial - possibly infinite when considering
      all possible combinations and variations.

# GUIDANCE FOR PATTERN INNOVATION
pattern_innovation_guidelines:
  
  when_to_create_new_patterns:
    - "Novel hardware feature utilization"
    - "New application domains"
    - "Performance optimizations"
    - "Resource constraint solutions"
    - "Improved abstractions"
    
  how_to_extend_existing_patterns:
    - "Combine multiple patterns in new ways"
    - "Adapt patterns to different resource profiles"
    - "Optimize patterns for specific use cases"
    - "Create domain-specific variations"
  
  validation_criteria_for_new_patterns:
    - "Solves a real problem"
    - "Provides clear benefits"
    - "Is reusable across projects"
    - "Has predictable behavior"
    - "Documents resource usage"

# PATTERN DISCOVERY INDICATORS
signs_of_emerging_patterns:
  
  repetition_threshold: |
    If you find yourself writing similar code structures 3+ times,
    you may have discovered a new pattern worth documenting.
  
  community_adoption: |
    If multiple developers independently create similar solutions,
    that's a strong indicator of a natural pattern emerging.
  
  hardware_affordances: |
    P2's unique features (Smart Pins, CORDIC, multiple cogs) naturally
    lead to patterns. New ways to use these create new patterns.
  
  domain_requirements: |
    Each application domain (robotics, IoT, gaming, etc.) develops
    its own patterns based on specific needs.

# PATTERN SPACE TAXONOMY
pattern_dimensions:
  
  # Patterns exist along multiple dimensions
  structural_dimension:
    - "Object composition (0 to N objects)"
    - "Currently captured in 5 patterns"
    - "But infinite variations possible"
  
  behavioral_dimension:
    - "State machines, event-driven, polling, etc."
    - "Partially captured in current patterns"
    - "Many behavioral patterns undiscovered"
  
  resource_dimension:
    - "Memory, cogs, pins, timing"
    - "8 hardware patterns discovered"
    - "New optimizations create new patterns"
  
  domain_dimension:
    - "Application-specific patterns"
    - "9 domains identified so far"
    - "Every new application domain adds patterns"
  
  temporal_dimension:
    - "Real-time, batch, streaming"
    - "Partially captured"
    - "Timing patterns still emerging"

# FOR THE EXTERNAL AI
ai_pattern_generation_freedom:
  
  permission_to_innovate: |
    You are NOT limited to these 28 patterns. They are examples,
    not rules. Feel free to:
    - Create new patterns when needed
    - Combine patterns in novel ways
    - Adapt patterns to specific requirements
    - Optimize patterns for your use case
  
  pattern_creation_guidelines:
    when_to_use_existing: |
      If your need closely matches an existing pattern, use it.
      These patterns are proven to work.
    
    when_to_adapt: |
      If a pattern is close but not perfect, adapt it.
      Document what you changed and why.
    
    when_to_create_new: |
      If no pattern fits, create a new one.
      Follow P2 conventions but solve the problem effectively.
  
  pattern_quality_metrics:
    good_pattern_indicators:
      - "Solves problem elegantly"
      - "Uses P2 features effectively"
      - "Clear resource usage"
      - "Maintainable code"
      - "Follows community conventions"
    
    poor_pattern_indicators:
      - "Unnecessarily complex"
      - "Wastes resources"
      - "Hard to understand"
      - "Fragile or unpredictable"
      - "Violates P2 idioms"

# PATTERN EVOLUTION TRACKING
pattern_versioning:
  
  current_snapshot: |
    These 28 patterns represent P2 development as of 2025-09-15.
    They are a snapshot, not a permanent definition.
  
  expected_changes:
    - "Smart Pin patterns will increase as adoption grows"
    - "Multi-core patterns will become more sophisticated"
    - "New communication protocols will add patterns"
    - "AI-generated code may create novel patterns"
  
  pattern_lifecycle:
    emerging: "Seen in <5% of relevant code"
    establishing: "Seen in 5-20% of relevant code"
    established: "Seen in 20-50% of relevant code"
    dominant: "Seen in >50% of relevant code"
    deprecated: "Being replaced by better patterns"

# STATISTICAL CONFIDENCE
pattern_statistics_disclaimer: |
  The percentages (like NO_OBJECTS at 51%) are based on the specific
  730 files analyzed. Different codebases will have different distributions.
  These statistics describe what IS, not what SHOULD BE.
  
  Example: Just because 51% of files use NO_OBJECTS doesn't mean
  your code should. If you need objects, use them!

# PATTERN DISCOVERY METHODOLOGY
how_these_patterns_were_found:
  automated_analysis:
    - "Object counting and classification"
    - "Method signature extraction"
    - "Resource usage profiling"
  
  manual_inspection:
    - "Domain expert review"
    - "Architectural pattern recognition"
    - "Best practice identification"
  
  limitations:
    - "Only analyzed public code"
    - "Snapshot of one point in time"
    - "May miss proprietary patterns"
    - "Biased toward certain domains"

# THE MOST IMPORTANT MESSAGE
key_takeaway_for_ai: |
  These patterns are DESCRIPTIVE (what developers currently do),
  not PRESCRIPTIVE (what you must do).
  
  Use them as:
  - Starting points for understanding
  - Examples of working solutions
  - Inspiration for your own solutions
  
  Don't use them as:
  - Rigid rules to follow
  - The only valid approaches
  - Limits on your creativity
  
  The P2 is a flexible architecture that supports many programming
  styles and patterns. These 28 are just the beginning.